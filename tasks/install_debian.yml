---
# tasks file for terraform
- name: Get package info to verify if unzip is installed on Debian based systems  # noqa 301 303 305
  shell: apt show unzip
  register: unzip
  ignore_errors: True

- name: Check if {{ terraform_app }} {{ terraform_version }} already installed on Debian based systems
  command: "{{ terraform_app }} --version"
  register: t_version
  ignore_errors: True

- name: Extract version from output
  set_fact:
    terraform_local_version: "{{ t_version.stdout_lines[0] | regex_findall('.*v(.+[0-9])') | first }}"
  when: t_version.rc != 2

- name: Temporarily install unzip currently not in installed state on Debian based systems.
  apt:
    name: unzip
    state: present
    force_apt_get: yes
    update_cache: yes
  when: unzip.rc == 100

- name: Downloading archive for {{ terraform_app }} {{ terraform_version }} temporarily to {{ terraform_dl_loc }} on Debian based systems
  get_url:
    url: "{{ terraform_dl_url }}/{{ terraform_app }}/{{ terraform_version }}/{{ terraform_app }}_{{ terraform_version }}_{{ terraform_osarch }}.zip"
    dest: "{{ terraform_dl_loc }}"
  when: t_version.rc == 2 or terraform_local_version != terraform_version

- name: "{{ terraform_app }}_unarchive on Debian based systems."
  unarchive:
    src: "{{ terraform_dl_loc }}/{{ terraform_app }}_{{ terraform_version }}_{{ terraform_osarch }}.zip"
    dest: "{{ terraform_bin_path }}"
    remote_src: true
  when: t_version.rc == 2 or terraform_local_version != terraform_version

- name: Uninstalling unzip as it was originally not in installed state on Debian based systems.
  apt:
    name: unzip
    state: absent
    force_apt_get: yes
    update_cache: yes
  when: unzip.rc == 100

- name: "{{ terraform_app }}_archive_removal on Debian based systems."
  file:
    path: "{{ terraform_dl_loc }}/{{ terraform_app }}_{{ terraform_version }}_{{ terraform_osarch }}.zip"
    state: absent
  when: t_version.rc == 2 or terraform_local_version != terraform_version