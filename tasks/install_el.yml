---
# tasks file for terraform

- name: Gather package facts to verify if unzip is installed on EL based systems
  package_facts:
    manager: rpm

- name: Check if {{ terraform_app }} {{ terraform_version }} already installed on Debian based systems  # noqa 301
  command: "{{ terraform_app }} --version"
  register: t_version
  ignore_errors: True

- name: Extract version from output
  set_fact:
    terraform_local_version: "{{ t_version.stdout_lines[0] | regex_findall('.*v(.+[0-9])') | first }}"
  when: t_version.rc != 2

- name: Downloading archive for {{ terraform_app }} {{ terraform_version }} temporarily to {{ terraform_dl_loc }} on EL based systems
  get_url:
    url: "{{ terraform_dl_url }}/{{ terraform_app }}/{{ terraform_version }}/{{ terraform_app }}_{{ terraform_version }}_{{ terraform_osarch }}.zip"
    dest: "{{ terraform_dl_loc }}"
  when: t_version.rc == 2 or terraform_local_version != terraform_version

- name: Temporarily install unzip on EL based systems if currently not in installed state on EL based systems.
  yum:
    name: unzip
    state: present
    update_cache: yes
  when: packages['unzip'] is not defined

- name: "{{ terraform_app }}_unarchive on EL based systems"
  unarchive:
    src: "{{ terraform_dl_loc }}/{{ terraform_app }}_{{ terraform_version }}_{{ terraform_osarch }}.zip"
    dest: "{{ terraform_bin_path }}"
    remote_src: true
  when: t_version.rc == 2 or terraform_local_version != terraform_version

- name: Uninstalling unzip from Debian based systems as it was originally not in installed state on EL based systems.
  yum:
    name: unzip
    state: absent
  when: packages['unzip'] is not defined

- name: "{{ terraform_app }}_archive_removal on EL based systems"
  file:
    path: "{{ terraform_dl_loc }}/{{ terraform_app }}_{{ terraform_version }}_{{ terraform_osarch }}.zip"
    state: absent
  when: t_version.rc == 2 or terraform_local_version != terraform_version
